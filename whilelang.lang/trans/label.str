module label

imports

signatures/-

rules

to-labeled: Root(statement) -> Labeled(labeledSt)
with {| count:
  rules(count : _ -> 1)
; labeledSt := <topdown(try(to-labeled(counter)))> statement
|}

counter: _ -> <int-to-string> res where res := <count>; rules(count : _ -> <inc> res)

to-labeled(counter): Assign(var, expr) -> LabeledAssign(var, expr, <counter>)
to-labeled(counter): Skip() -> LabeledSkip(<counter>)
to-labeled(counter): IfThenElse(if, then, else) -> LabeledIfThenElse(if, <counter>, then, else)
to-labeled(counter): While(expr, body) -> LabeledWhile(expr, <counter>, body)
