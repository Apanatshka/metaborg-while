#alt-syntax
module control-flow

imports
  external
    signatures/-
    signatures/desugared/-

control-flow rules

  root Procedure(_, _, _, _, s) = start -> s -> end

  root Main(_, s) = start -> s -> this -> end

  Assign(_, rhs) =
    entry -> rhs -> this -> exit

  Skip() = entry -> exit

  Seq(s1,s2) = entry -> s1 -> s2 -> exit

  IfThenElse(c, t, e) =
    entry -> c -> t -> exit, 
             c -> e -> exit

  While(e, s) =
    entry -> e -> s -> e -> exit

  node Ref(_)
  node Num(_)
  Add(l,r) = entry -> l -> r -> this -> exit
  Sub(l,r) = entry -> l -> r -> this -> exit
  Mul(l,r) = entry -> l -> r -> this -> exit
  Div(l,r) = entry -> l -> r -> this -> exit
  node True()
  node False()
  Not(s) = entry -> s -> this -> exit
  And(l,r) = entry -> l -> r -> this -> exit
  Or(l,r) = entry -> l -> r -> this -> exit
  Eq(l,r) = entry -> l -> r -> this -> exit
  Gt(l,r) = entry -> l -> r -> this -> exit
  Gte(l,r) = entry -> l -> r -> this -> exit
  Lt(l,r) = entry -> l -> r -> this -> exit
  Lte(l,r) = entry -> l -> r -> this -> exit

properties

  live: MaySet(term)

property rules

  live(Ref(n) -> next) = live(next) \/ {n}

  live(Assign(Var(n), _) -> next) = live(next) \ {n}

  live(Main(vars, _) -> next) = live(next) \/ Set.fromList(vars)

  live(_ -> next) = live(next)