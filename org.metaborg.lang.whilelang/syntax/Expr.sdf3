module Expr

imports

  Common

context-free syntax

  Expr.Ref = ID
  Expr.Num = INT
  Expr.Add = [[Expr] + [Expr]] {left}
  Expr.Sub = [[Expr] - [Expr]] {left}
  Expr.Mul = [[Expr] * [Expr]] {left}
  Expr.Div = [[Expr] / [Expr]] {left}
  Expr.True = [true]
  Expr.False = [false]
  Expr.Not = [not [Expr]]
  Expr.And = [[Expr] && [Expr]] {left}
  Expr.Or  = [[Expr] || [Expr]] {left}
  Expr.Eq  = [[Expr] == [Expr]] {left}
  Expr.Gt  = [[Expr] > [Expr]] {left}
  Expr.Gte = [[Expr] >= [Expr]] {left}
  Expr.Lt  = [[Expr] < [Expr]] {left}
  Expr.Lte = [[Expr] <= [Expr]] {left}
  Expr = [([Expr])] {bracket}

context-free priorities

  {left: Expr.Mul Expr.Div} >
  {left: Expr.Add Expr.Sub} >
  Expr.And >
  Expr.Or >
  {Expr.Eq Expr.Gt Expr.Gte Expr.Lt Expr.Lte}